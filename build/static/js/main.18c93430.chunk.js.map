{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","crudObj","getAll","axios","get","then","response","data","create","newPerson","post","update","id","updatedPerson","put","remove","delete","Notification","message","type","content","className","Filter","query","onChange","value","PersonForm","props","onSubmit","nameValue","nameOnChange","phoneValue","phoneOnChange","Person","name","number","deletePerson","onClick","App","useState","persons","setPersons","newName","setNewName","newPhoneNo","setNewPhoneNo","nameQuery","setNameQuery","setMessage","useEffect","personsService","personsList","personsToShow","length","filter","person","toUpperCase","includes","event","target","preventDefault","existingPerson","find","window","confirm","setTimeout","concat","createdPerson","map","noContent","catch","error","ReactDOM","render","document","getElementById"],"mappings":"6LAEMA,EAAU,eAwBDC,EAFC,CAAEC,OApBH,WAEX,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkBnBC,OAfX,SAACC,GAEZ,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAaXI,OAVnB,SAACC,EAAIC,GAEhB,OADgBV,IAAMW,IAAN,UAAad,EAAb,YAAwBY,GAAMC,GAC/BR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQHQ,OAL3B,SAACH,GAEZ,OADgBT,IAAMa,OAAN,UAAgBhB,EAAhB,YAA2BY,IAC5BP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,OClBvCU,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,GAAIA,EAAS,CACX,IAAQC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OACE,qBAAKC,UAAWF,EAAhB,SACGC,IAKP,OAAO,MAGHE,EAAS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvB,OACE,sDACqB,uBAAOC,MAAOF,EAAOC,SAAUA,QAKlDE,EAAa,SAACC,GAClB,IAAQC,EAAiED,EAAjEC,SAAUC,EAAuDF,EAAvDE,UAAWC,EAA4CH,EAA5CG,aAAcC,EAA8BJ,EAA9BI,WAAYC,EAAkBL,EAAlBK,cAEvD,OACE,uBAAMJ,SAAUA,EAAhB,UACE,yCACQ,uBAAOH,MAAOI,EAAWL,SAAUM,OAE3C,2CACU,uBAAOL,MAAOM,EAAYP,SAAUQ,OAE9C,8BACE,wBAAQb,KAAK,SAAb,uBAMFc,EAAS,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAC9B,OACE,8BACGF,EADH,IACUC,EACR,wBAAQE,QAASD,EAAjB,wBAoISE,EA/HH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,mBAAS,MAAvC,mBAAOrB,EAAP,KAAgB8B,EAAhB,KAEAC,qBAAU,WACRC,EAAehD,SACZG,MAAK,SAAA8C,GACJV,EAAWU,QAEd,IAEH,IAAMC,EAAqC,IAArBN,EAAUO,OAC5Bb,EACAA,EAAQc,QAAO,SAAAC,GAAM,OACrBA,EAAOrB,KAAKsB,cAAcC,SAASX,EAAUU,kBAkFjD,OACE,gCACE,2CACA,cAAC,EAAD,CAActC,QAASA,IACvB,cAAC,EAAD,CAAQK,MAAOuB,EAAWtB,SARJ,SAACkC,GACzBX,EAAaW,EAAMC,OAAOlC,UAQxB,2CACA,cAAC,EAAD,CACEG,SAtFY,SAAC8B,GACjBA,EAAME,iBACN,IAAMC,EAAiBrB,EAAQsB,MAAK,SAAAP,GAClC,OAAOA,EAAOrB,KAAKsB,gBAAkBd,EAAQc,iBAG/C,GAAIK,GACF,GAAIE,OAAOC,QAAP,UAAkBtB,EAAlB,2EAAoG,CACtG,IAAM7B,EAAa,2BACdgD,GADc,IAEjB1B,OAAQS,IAEJhC,EAAKiD,EAAejD,GAE1BsC,EAAevC,OAAOC,EAAIC,GACvBR,MAAK,SAAAC,GACJ0C,EAAW,CACT7B,KAAM,UACNC,QAAQ,WAAD,OAAaP,EAAcqB,QAEpC+B,YAAW,kBAAMjB,EAAW,QAAO,KACnCP,EAAWD,EAAQc,QAAO,SAAAC,GAAM,OAAIA,EAAO3C,KAAOA,KAAIsD,OAAOrD,IAC7D8B,EAAW,IACXE,EAAc,YAjBtB,CAuBA,IAAMpC,EAAY,CAChByB,KAAMQ,EACNP,OAAQS,GAGVM,EAAe1C,OAAOC,GACnBJ,MAAK,SAAA8D,GACJnB,EAAW,CACT7B,KAAM,UACNC,QAAQ,SAAD,OAAW+C,EAAcjC,QAElC+B,YAAW,kBAAMjB,EAAW,QAAO,KACnCP,EAAWD,EAAQ0B,OAAOC,IAC1BxB,EAAW,IACXE,EAAc,SA4CdhB,UAAWa,EACXZ,aArBmB,SAAC4B,GACxBf,EAAWe,EAAMC,OAAOlC,QAqBpBM,WAAYa,EACZZ,cAnBoB,SAAC0B,GACzBb,EAAca,EAAMC,OAAOlC,UAoBzB,yCACA,8BACG2B,EAAcgB,KAAI,SAAAb,GAAM,OACvB,cAAC,EAAD,CAEErB,KAAMqB,EAAOrB,KACbC,OAAQoB,EAAOpB,OACfC,aAAc,kBAnDH,SAACxB,GACpB,IAAM2C,EAASf,EAAQsB,MAAK,SAAAP,GAAM,OAAIA,EAAO3C,KAAOA,KAEhDmD,OAAOC,QAAP,uCAA+CT,EAAOrB,KAAtD,OACFgB,EAAenC,OAAOH,GACnBP,MAAK,SAAAgE,GACJ5B,EAAWD,EAAQc,QAAO,SAAAC,GAAM,OAAIA,EAAO3C,KAAOA,SAEnD0D,OAAM,SAAAC,GACLvB,EAAW,CACT7B,KAAM,QACNC,QAAQ,GAAD,OAAKmC,EAAOrB,KAAZ,sCAET+B,YAAW,kBAAMjB,EAAW,QAAO,KACnCP,EAAWD,EAAQc,QAAO,SAAAC,GAAM,OAAIA,EAAO3C,KAAOA,SAqC5BwB,CAAamB,EAAO3C,MAHnC2C,EAAO3C,a,MClKxB4D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.18c93430.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newPerson) => {\r\n    const request = axios.post(baseUrl, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, updatedPerson) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst crudObj = { getAll, create, update, remove }\r\n\r\nexport default crudObj\r\n","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst Notification = ({ message }) => {\n  if (message) {\n    const { type, content } = message\n\n    return (\n      <div className={type}>\n        {content}\n      </div>\n    )\n  }\n\n  return null\n}\n\nconst Filter = ({ query, onChange }) => {\n  return (\n    <div>\n      filter shown with: <input value={query} onChange={onChange} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  const { onSubmit, nameValue, nameOnChange, phoneValue, phoneOnChange } = props\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={nameValue} onChange={nameOnChange} />\n      </div>\n      <div>\n        number: <input value={phoneValue} onChange={phoneOnChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Person = ({ name, number, deletePerson }) => {\n  return (\n    <p>\n      {name} {number}\n      <button onClick={deletePerson}>delete</button>\n    </p>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhoneNo, setNewPhoneNo] = useState('')\n  const [nameQuery, setNameQuery] = useState('')\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    personsService.getAll()\n      .then(personsList => {\n        setPersons(personsList)\n      })\n  }, [])\n\n  const personsToShow = nameQuery.length === 0\n    ? persons\n    : persons.filter(person =>\n      person.name.toUpperCase().includes(nameQuery.toUpperCase())\n    )\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const existingPerson = persons.find(person => {\n      return person.name.toUpperCase() === newName.toUpperCase()\n    })\n\n    if (existingPerson) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const updatedPerson = {\n          ...existingPerson,\n          number: newPhoneNo\n        }\n        const id = existingPerson.id\n\n        personsService.update(id, updatedPerson)\n          .then(response => {\n            setMessage({\n              type: 'success',\n              content: `Updated ${updatedPerson.name}`\n            })\n            setTimeout(() => setMessage(null), 4000)\n            setPersons(persons.filter(person => person.id !== id).concat(updatedPerson))\n            setNewName('')\n            setNewPhoneNo('')\n          })\n      }\n      return\n    }\n\n    const newPerson = {\n      name: newName,\n      number: newPhoneNo\n    }\n\n    personsService.create(newPerson)\n      .then(createdPerson => {\n        setMessage({\n          type: 'success',\n          content: `Added ${createdPerson.name}`\n        })\n        setTimeout(() => setMessage(null), 4000)\n        setPersons(persons.concat(createdPerson))\n        setNewName('')\n        setNewPhoneNo('')\n\n      })\n  }\n\n  const deletePerson = (id) => {\n    const person = persons.find(person => person.id === id)\n\n    if (window.confirm(`Do you really want to delete ${person.name}?`)) {\n      personsService.remove(id)\n        .then(noContent => {\n          setPersons(persons.filter(person => person.id !== id))\n        })\n        .catch(error => {\n          setMessage({\n            type: 'error',\n            content: `${person.name} was already deleted from server`\n          })\n          setTimeout(() => setMessage(null), 4000)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPhoneNo(event.target.value)\n  }\n\n  const handleQueryChange = (event) => {\n    setNameQuery(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter query={nameQuery} onChange={handleQueryChange} />\n      <h2>Add a new</h2>\n      <PersonForm\n        onSubmit={addPerson}\n        nameValue={newName}\n        nameOnChange={handleNameChange}\n        phoneValue={newPhoneNo}\n        phoneOnChange={handlePhoneChange}\n      />\n      <h2>Numbers</h2>\n      <div>\n        {personsToShow.map(person =>\n          <Person\n            key={person.id}\n            name={person.name}\n            number={person.number}\n            deletePerson={() => deletePerson(person.id)}\n          />\n        )}\n      </div>\n    </div >\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}